/////////////////////////////////////////////////////////////////////////////////////
// Цепочка обязанностей
// Для чего? Позволяет у объекта вызывать последовательность действий, операций и последовательно их модифицировать
// Например jQuery
/////////////////////////////////////////////////////////////////////////////////////


// Комментарий
//Chain of Responsibility вообще не то, цепочка обязанностей это когда у нас классы с большой вложенностью,
//дочерний вызывает какой нибудь эрор, и все классы по цепочке вызывают эрор у себя и у родителя,
//и каждый на своем уровне что то делает, ну или не делает, а потом просто вызывает родительский super.error(...arg),
//то есть в этом патерне метод который цепочный обязательно должен быть у всех классов потомков,
//а то что вы показали это просто каррирование на классе.

class MySum{
    constructor(initialValue = 42) {
        this.sum = initialValue
    }

    add(value) {
        this.sum += value 
        return this  // !!!!!!!!!
    }
}

const sum1 = new MySum()
console.log(sum1.add(8).add(10).add(11).sum)



const sum2 = new MySum(0)
console.log(sum2.add(3).add(15).add(11).sum)
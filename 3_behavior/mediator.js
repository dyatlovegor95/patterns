/////////////////////////////////////////////////////////////////////////////////////
// ПОСРЕДНИК
// Для чего? Позволяет выстраивать плотную и тесную коммуникацию между различными объектами разного типа.
// При этом он предоставляет централизованную абстракцию, которая позволяет взаимодействовать группе объектов черех друг друга
// 
/////////////////////////////////////////////////////////////////////////////////////


// В медиаторе нужно было добавить, что его смысл в том что юзеры друг с другом вообще не взаимодействуют 
// у них нет никакого механизма общения и всё они делают через посредника, 
// это основная его задача для наглядности обычно делают 3 класса разных чтобы было понятно, что 1 общается с 3 тока через 2. 
// Это реально важно потому что этот паттерн реализуют обычно когда уже у нас зоопарк сущностный связанных друг с другом 
// хз как и чтобы как то упорядочить делают всех связанными только с одним медиатором а он уже разруливает.

// Функциональность создавать пользователь и подключать их к чату, к конкретной комнате
class User {
    constructor(name) {
        this.name = name
        this.room = null
    }

    send(message, to) {
        this.room.send(message, this, to)      // связка медиатора
    }

    receive(message, from) {
        console.log(`${from.name} => ${this.name}: ${message}`)
    }
}


class ChatRoom {
    constructor() {
        this.users = {}
    }

    register(user) {
        this.users[user.name] = user
        user.room = this               // связка медиатора
    }

    send(message, from, to) {
        if (to) {
            to.receive(message, from) // отправить кому то конкретно
        }
        else {    // отправить всем
            Object.keys(this.users).forEach(key => {
                if (this.users[key] !== from) {
                    this.users[key].receive(message, from)
                }
            })
        }
    }
}


const u1 = new User('Egor 1')
const u2 = new User('Egor 2')
const u3 = new User('Egor 3')

const room = new ChatRoom()

room.register(u1)
room.register(u2)
room.register(u3)

u1.send('Hello', u2)
u2.send('Hello Hello', u1)
u3.send('All Hello')